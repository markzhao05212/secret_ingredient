name: Capture the Narrative Bot System CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio flake8 black mypy
        
    - name: Create test environment
      run: |
        cp .env.example .env
        mkdir -p data/logs
        echo '[]' > data/accounts.json.example
        
    - name: Run linting
      run: |
        flake8 src/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ scripts/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting
      run: |
        black --check src/ scripts/ tests/
        
    - name: Type checking
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
        
    - name: Run tests
      run: |
        PYTHONPATH=src pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
        
    - name: Run safety check
      run: |
        safety check --json || true
        
    - name: Run bandit security check
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t capture-narrative-bot:test .
        
    - name: Test Docker image
      run: |
        # Test that the image runs without errors
        docker run --rm capture-narrative-bot:test python -c "import sys; sys.path.insert(0, 'src'); from config.settings import settings; print('Docker build successful')"
        
    - name: Run container smoke test
      run: |
        cp .env.example .env
        echo '[]' > data/accounts.json
        docker run --rm -v $(pwd)/data:/app/data -v $(pwd)/.env:/app/.env capture-narrative-bot:test python scripts/deploy_bots.py --dry-run

  integration:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, security, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Setup test environment
      run: |
        cp .env.example .env
        mkdir -p data/logs data/performance
        
    - name: Run integration tests
      env:
        # Mock environment for integration tests
        TEAM_INVITATION_CODE: "test_code"
        CAMPAIGN_OBJECTIVE: "support_victor"
      run: |
        PYTHONPATH=src python scripts/deploy_bots.py test
        
    - name: Generate test analytics
      run: |
        PYTHONPATH=src python scripts/analytics.py --hours 1 --summary
        
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [integration]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [deploy]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          requirements.txt
          README.md
          CHANGELOG.md
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}